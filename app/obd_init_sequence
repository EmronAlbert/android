                       

                        mSocket = new Socket("192.168.0.10", 35000);
                        describe();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        fastInit();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        reset();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        setAuto();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        describe();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        mUIHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                for (ConnectionListener listener : mConnectionListeners) {
                                    listener.onConnected();
                                }
                            }
                        });






    public void fastInit() {
        mOBDHandler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    if (mSocket != null && mSocket.isConnected() && !mSocket.isClosed()) {
                        Log.d(TAG, "fastInit: ");
                        runCommand(OBDHelper.CMD_FAST_INIT);
                    }
                } catch (Exception e) {
                    Log.w(TAG, Log.getStackTraceString(e));
                }
            }
        });
    }

    public void reset() {
        mOBDHandler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    if (mSocket != null && mSocket.isConnected() && !mSocket.isClosed()) {
                        Log.d(TAG, "reset: ");
                        runCommand("AT D");//set Default
                        runCommand("AT Z");//reset
                        runCommand("AT E0");//echo off/on *1
                        runCommand("AT L0");//linefeeds off
                        runCommand("AT S0");//spaces off/on *1
                        setAuto();
                    }
                } catch (Exception e) {
                    Log.w(TAG, Log.getStackTraceString(e));
                }
            }
        });
    }

    public void setAuto() {
        mOBDHandler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    if (mSocket != null && mSocket.isConnected() && !mSocket.isClosed()) {
                        Log.d(TAG, "setAuto: ");
                        runCommand(OBDHelper.CMD_SET_AUTO);
                        runCommand("AT SS");
                    }
                } catch (Exception e) {
                    Log.w(TAG, Log.getStackTraceString(e));
                }
            }
        });
    }

    public void describe() {
        mOBDHandler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    if (mSocket != null && mSocket.isConnected() && !mSocket.isClosed()) {
                        Log.d(TAG, "describe: ");
                        runCommand(OBDHelper.CMD_DEVICE_DESCRIPTION);
                        runCommand(OBDHelper.CMD_DESCRIBE_PROTOCOL);
                    }
                } catch (Exception e) {
                    Log.w(TAG, Log.getStackTraceString(e));
                }
            }
        });
    }



    private SpeedData runCommand(String command) throws IOException, InterruptedException, NumberFormatException {
        String rawData;
        byte b;
        InputStream in = mSocket.getInputStream();
        OutputStream out = mSocket.getOutputStream();
        out.write((command + '\r').getBytes());
        out.flush();
        StringBuilder res = new StringBuilder();

        // read until '>' arrives
        long start = System.currentTimeMillis();
        while ((char) (b = (byte) in.read()) != '>' && res.length() < 60 && System.currentTimeMillis() - start < 1000) { // && System.currentTimeMillis()-start<500
            res.append((char) b);
        }

        rawData = res.toString().trim();
        Log.d(TAG, "runCommand: rawData = " + rawData);
        if (rawData.contains("STOPPED")) {
            Thread.sleep(1000);
        } else if (rawData.contains("SEARCHING")) {
            Thread.sleep(1000);
        } else if (rawData.contains("CAN ERROR")) {
            Thread.sleep(1000);
            disconnect();
            connect();
            return new SpeedData("CAN ERROR");
        } else if (rawData.contains("NO DATA")) {
            Thread.sleep(1000);
        } else if (rawData.contains(OBDHelper.CMD_SPEED) || rawData.contains("410D")) {

            rawData = rawData.replaceAll("\r", " ");
            rawData = rawData.replaceAll(OBDHelper.CMD_SPEED, "");
            rawData = rawData.replaceAll("41 0D", " ").trim();
            rawData = rawData.replaceAll("410D", " ").trim();
            rawData = rawData.replaceAll("10D1", " ").trim();
            String[] data = rawData.split(" ");

            Log.i(TAG, "rawData: " + rawData);
            Log.i(TAG, "data: " + data[0]);
            Log.i(TAG, "datawew: " + Integer.decode("0x" + data[0]));
            Log.i(TAG, "datawew: " + String.valueOf(Integer.decode("0x" + data[0])));

            return new SpeedData(Integer.decode("0x" + data[0]));

        }
        return new SpeedData(rawData);
    }