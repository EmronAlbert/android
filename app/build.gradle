apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.sonarqube'


android {

  def globalConfiguration = rootProject.ext.config

  compileSdkVersion globalConfiguration.androidCompileSdkVersion
  buildToolsVersion globalConfiguration.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion globalConfiguration.androidMinSdkVersion
    targetSdkVersion globalConfiguration.androidTargetSdkVersion

    applicationId globalConfiguration.appId
    versionCode globalConfiguration.appVersionCode
    versionName globalConfiguration.appVersionName
    testInstrumentationRunner globalConfiguration.testInstrumentationRunner
    testApplicationId globalConfiguration.testAppId
    vectorDrawables.useSupportLibrary = true
    multiDexEnabled = true
  }
  buildTypes {
    release {
      debuggable false
      jniDebuggable false
      minifyEnabled false
      shrinkResources false
      //            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      //            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
      ndk {
        abiFilters = []
        abiFilters.addAll(['armeabi', 'armeabi-v7a', 'x86'])
      }
    }
    debug {
      versionNameSuffix '-dev'
      debuggable true
      jniDebuggable true
      minifyEnabled false
      shrinkResources false
      //            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      //            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
      ndk {
        abiFilters = []
        abiFilters.addAll(['armeabi', 'armeabi-v7a', 'x86'])
      }
    }
  }
  configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
  }
  dexOptions {
    javaMaxHeapSize "1g"
  }
  lintOptions {
    abortOnError false
    ignoreWarnings true
    quiet true
  }
  aaptOptions {
    useNewCruncher false
  }
  sourceSets {
    main {
      aidl.srcDirs = ['src/main/java']
      jni.srcDirs = []
      jniLibs.srcDir 'src/main/jniLibs'
    }
  }
  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/CERT.RSA'
    exclude 'META-INF'
  }
  productFlavors {
    mock {
      applicationIdSuffix = ".mock"
    }
    prod
  }

  // Remove mockRelease as it's not needed.
  android.variantFilter { variant ->
    if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
      variant.setIgnore(true)
    }
  }
  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }

  dataBinding {
    enabled = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_7
  }
}

sonarqube {
  properties {
    property "sonar.projectName", ""
    property "sonar.projectKey", ""

    property "sonar.sourceEncoding", "UTF-8"
    property "sonar.sources", "."
    property "sonar.exclusions", "build/**,**/*.png,**/*.so,src/androidTest/**,src/test/**,src/mock/**,src/prod/**"

    property "sonar.import_unknown_files", true

    property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
  }
}

retrolambda {
  javaVersion JavaVersion.VERSION_1_7
  defaultMethods false
  incremental true
}


task copyResDirectoryToClasses(type: Copy) {
  from "${projectDir}/src/test/res"
  into "${buildDir}/intermediates/classes/test/debug/res"
}

crashlytics {
  enableNdk true
  androidNdkOut 'build/intermediates/transforms/mergeJniLibs/release/folders/2000/1f/main/lib'
  androidNdkLibsOut 'build/intermediates/transforms/stripDebugSymbol/release/folders/2000/1f/main/lib' //path for jni libraries
}



task appDebug(dependsOn: [':app:assembleDebug'])
task appRelease(dependsOn: [':app:assembleRelease'])


dependencies {

  def moduleDependencies = rootProject.ext.moduleDependecies
  def appDependencies = rootProject.ext.appDependencies
  def appTestDependencies = rootProject.ext.appTestDependencies
  def developmentDependencies = rootProject.ext.developmentDependencies

  compile fileTree(include: 'environment3.jar', dir: 'libs')

  //AARs
  compile moduleDependencies.skmaps
  compile moduleDependencies.connectionProbe
  compile moduleDependencies.ffmpeg
  compile moduleDependencies.photoView
  compile moduleDependencies.videoView
  compile moduleDependencies.volley
  compile moduleDependencies.eventbus
  compile moduleDependencies.dotindicator

  //MODULES for development
//  compile project(':eventbus')
//  compile project(':photoview')
//  compile project(':volley')
//  compile project(':connectivity')
//  compile project(':scalablevideoview')
//  compile project(':ffmpeg')
//  compile project(':dotindicator')

  compile appDependencies.supportv4
  compile appDependencies.appcompatv7
  compile appDependencies.design
  compile appDependencies.recyclerView
  compile appDependencies.cardView
  compile appDependencies.percent
  compile appDependencies.multidex
  compile appDependencies.customtabs
  compile appDependencies.vectorDrawables
  compile appDependencies.supportAnnotations
  compile appDependencies.gmsLocation
  compile appDependencies.gmsAuth
  compile appDependencies.firebaseMessaging
  compile appDependencies.firebaseAuth
  compile appDependencies.googleApi
  compile appDependencies.facebookApi
  compile appDependencies.glide
  compile appDependencies.materialishProgress
  compile appDependencies.appIntro
  compile appDependencies.apacheHttpClient
  compile appDependencies.apacheHttpMime
  compile appDependencies.signpost
  compile appDependencies.crashlytics
  compile appDependencies.crashlyticsNdk

  // Dependencies for development
  debugCompile developmentDependencies.leakCanary
  releaseCompile developmentDependencies.leakCanaryNoOp

  // Dependencies for local unit tests
  testCompile appTestDependencies.powermock
  testCompile appTestDependencies.powermockJUnit
  testCompile appTestDependencies.robolectric
  testCompile appTestDependencies.junit
  testCompile appTestDependencies.mockito
  testCompile appTestDependencies.hamcrest

  // Android Testing Support Library's runner and rules
  androidTestCompile appTestDependencies.runner
  androidTestCompile appTestDependencies.rules

  // Dependencies for Android unit tests
  androidTestCompile appDependencies.multidex
  androidTestCompile appTestDependencies.junit
  androidTestCompile appTestDependencies.mockito
  androidTestCompile appTestDependencies.dexmaker
  androidTestCompile appTestDependencies.dexmakerMockito

  // Espresso UI Testing
  androidTestCompile appTestDependencies.espresso
  androidTestCompile appTestDependencies.espressoContrib
  androidTestCompile appTestDependencies.espressoIntents

  // Resolve conflicts between main and test APK:
  androidTestCompile appDependencies.supportAnnotations
  androidTestCompile appDependencies.supportv4
  androidTestCompile appDependencies.recyclerView
  androidTestCompile appDependencies.appcompatv7
  androidTestCompile appDependencies.design
}

apply plugin: 'com.google.gms.google-services'